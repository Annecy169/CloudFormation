## This CloudFormation template creates an ECS Cluster to host Docker containers
## **KEY FEATURES
##  - Auto Scaling Groups
##    - Allowing a Spot instance to be made and whenever there is not a spot avaliable then
##      a standard On Demand instance is created
##  - ALB
##    - The Load balencer creates a centeralised host that links the DNS to what ever instance has been created.

## THERE IS USER INPUT NEED FOR THE CERTIFICATE
##    The User will have to go to ACM to validate the Cert Befor continuing

Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  
  EC2RoleName:
    Description: Name for EC2 ECS Role
    MinLength: '3'
    Default: EC2ECSCloudformationRole
    Type: String

  VPCCidr:
    Description: The IP address range used fir the main VPC
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 10.10.0.0/24
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  EC2AMI:
    Description: The AMI for your EC2 Instances
    Type: String
    Default: ami-0ae254c8a2d3346a7

  EC2InstanceType:
    Description: Instance type for EC2
    Type: String
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
    Default: t2.micro

  ECSClusterName:
    Description: ECS Cluster name
    Type: String
    Default: EC2ECSCloudFormation

  Route53ZoneID:
    Description: Route 53 Hosted Zone ImageId
    Type: AWS::Route53::HostedZone::Id
    MinLength: 8

  Route53DNSName:
    Description: DNS Name for Route53
    Type: String
    MinLength: 3
  
  DataDogAPIKey:
    Description: API key for DataDogAPIKey
    Type: String
    MinLength: 30
    Default: 6d9b8b7a93b807a1265923ca12511281

Resources:
  EC2IAMRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
        - 
          Effect: "Allow"
          Principal: 
            Service: 
              - "ec2.amazonaws.com"
          Action: 
            - "sts:AssumeRole"
      ManagedPolicyArns: 
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
      RoleName: !Ref EC2RoleName
  
  IamConfigInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: 
        - !Ref EC2IAMRole

  EC2VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCidr
      EnableDnsHostnames: False
      EnableDnsSupport: True
      InstanceTenancy: default
  
  EC2InternetGateway:
    Type: AWS::EC2::InternetGateway

  EC2VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref EC2VPC
      InternetGatewayId: !Ref EC2InternetGateway

  EC2SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 0
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref EC2VPC
      CidrBlock: !Select [ 0, !Cidr [ !Ref VPCCidr, 2, 4 ]]
      MapPublicIpOnLaunch: true

  EC2SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select
        - 1
        - !GetAZs 
          Ref: 'AWS::Region'
      VpcId: !Ref EC2VPC
      CidrBlock: !Select [ 1, !Cidr [ !Ref VPCCidr, 2, 4 ]]
      MapPublicIpOnLaunch: true

  EC2VPCRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EC2VPC

  EC2InternetRoute:
    Type: AWS::EC2::Route
    DependsOn: EC2VPCGatewayAttachment
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref EC2InternetGateway
      RouteTableId: !Ref EC2VPCRouteTable

  EC2SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EC2VPCRouteTable
      SubnetId: !Ref EC2SubnetA

  EC2SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref EC2VPCRouteTable
      SubnetId: !Ref EC2SubnetB

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "EC2ECSSecurityGroup"
      GroupDescription: "SSH HTTP traffic in, all traffic out."
      VpcId: !Ref EC2VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '82'
          ToPort: '82'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties: 
      ClusterName: !Ref ECSClusterName

  HTTPEC2Listner:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties: 
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref EC2LoadBalancer
      Port: 80
      Protocol: HTTP

  EC2TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      Port: 82
      Name: !Ref ECSClusterName
      Protocol: HTTP
      VpcId: !Ref EC2VPC

  EC2LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties: 
      IpAddressType: ipv4
      Name: !Ref ECSClusterName
      Scheme: internet-facing
      SecurityGroups: 
        - !GetAtt EC2SecurityGroup.GroupId
      Subnets: 
        - !Ref EC2SubnetA
        - !Ref EC2SubnetB
      Type: application

  NonSpotLaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      KeyName: !Ref KeyName
      ImageId: !Ref EC2AMI
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            DD_API_KEY=${DataDogAPIKey} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
      SecurityGroups:
        - !GetAtt EC2SecurityGroup.GroupId
      InstanceType: !Ref EC2InstanceType
      InstanceMonitoring: false
      IamInstanceProfile: !Ref IamConfigInstanceProfile
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: "30"
            VolumeType: "gp2"
            Iops: 100
  
  SpotLaunchConfig: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties: 
      KeyName: !Ref KeyName
      ImageId: !Ref EC2AMI
      UserData: 
        Fn::Base64:
          !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            DD_API_KEY=${DataDogAPIKey} bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
      SecurityGroups:
        - !GetAtt EC2SecurityGroup.GroupId
      SpotPrice: 0.007
      InstanceType: !Ref EC2InstanceType
      InstanceMonitoring: false
      IamInstanceProfile: !Ref IamConfigInstanceProfile
      BlockDeviceMappings: 
        - DeviceName: /dev/xvda
          Ebs: 
            VolumeSize: "30"
            VolumeType: "gp2"
            Iops: 100

  NonSpotAutoScalingA:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Sub NonSpot${ECSClusterName}AutoScaling
      AvailabilityZones: 
        - !Select 
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
      Cooldown: 300
      DesiredCapacity: 0
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref NonSpotLaunchConfig
      MaxSize: 1
      MinSize: 0
      MetricsCollection:
        - 
          Granularity: "1Minute"
          Metrics: 
            - 'GroupInServiceInstances'
      ServiceLinkedRoleARN: arn:aws:iam::932232047261:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
      TargetGroupARNs:
        - !Ref EC2TargetGroup
      VPCZoneIdentifier:
        - !Ref EC2SubnetA

  SpotAutoScalingB:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties: 
      AutoScalingGroupName: !Sub Spot${ECSClusterName}AutoScaling
      AvailabilityZones:
        - !Select 
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
      Cooldown: 300
      DesiredCapacity: 1
      HealthCheckGracePeriod: 300
      HealthCheckType: EC2
      LaunchConfigurationName: !Ref SpotLaunchConfig
      MaxSize: 1
      MinSize: 0
      MetricsCollection:
        - 
          Granularity: "1Minute"
          Metrics: 
            - 'GroupInServiceInstances'
      ServiceLinkedRoleARN: arn:aws:iam::932232047261:role/aws-service-role/autoscaling.amazonaws.com/AWSServiceRoleForAutoScaling
      TargetGroupARNs:
        - !Ref EC2TargetGroup
      VPCZoneIdentifier:
        - !Ref EC2SubnetB

  DNSCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref Route53DNSName
      DomainValidationOptions:
            - DomainName: !Ref Route53DNSName
              ValidationDomain: !Ref Route53DNSName
      ValidationMethod: DNS

  HTTPSEC2Listner:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: DNSCert
    Properties: 
      Certificates: 
        - CertificateArn: !Ref DNSCert
      DefaultActions: 
        - Type: forward
          TargetGroupArn: !Ref EC2TargetGroup
      LoadBalancerArn: !Ref EC2LoadBalancer
      Port: 443
      Protocol: HTTPS

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    DependsOn: DNSCert # One of the last actions to occur
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Sub NonSpot${ECSClusterName}AutoScaling
      Cooldown: '60'
      ScalingAdjustment: '1'

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    DependsOn: DNSCert # One of the last actions to occur
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Sub NonSpot${ECSClusterName}AutoScaling
      Cooldown: '60'
      ScalingAdjustment: '-1'

  SpotInstanceStopped:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Maximum
      Threshold: '1'
      AlarmDescription: Spot Instance Stopped
      Period: '60'
      AlarmActions:
        - Ref: ScaleUpPolicy
      Namespace: AWS/AutoScaling
      OKActions: 
        - Ref: ScaleDownPolicy
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref SpotAutoScalingB
      MetricName: GroupInServiceInstances

  ApiGateway:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Description: API Gateway
      Name: !Ref Route53DNSName
      EndpointConfiguration:
        Types:
          - REGIONAL
  
  ApiCustomDomain:
    Type: AWS::ApiGateway::DomainName
    DependsOn: ApiGateway
    Properties: 
      DomainName: !Ref Route53DNSName
      EndpointConfiguration:
        Types:
          - REGIONAL
      RegionalCertificateArn: !Ref DNSCert

  ## Start API Specific

  APIStack:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: european-fuel

  APIMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref APIStack
      RestApiId: !Ref ApiGateway
      AuthorizationType: NONE
      Integration:
        Type: HTTP
        IntegrationHttpMethod: GET
        IntegrationResponses:
          - StatusCode: 200
        Uri: !Sub http://${EC2LoadBalancer.DNSName}
      MethodResponses:
        - StatusCode: 200
      OperationName: !Ref Route53DNSName

  APIDeployment:
    DependsOn: APIMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGateway

  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: api
      Description: API Stage
      RestApiId: !Ref ApiGateway
      DeploymentId: !Ref APIDeployment
      MethodSettings:
        - ResourcePath: /
          HttpMethod: GET

  APIMapping:
    Type: 'AWS::ApiGateway::BasePathMapping'
    DependsOn: ApiCustomDomain
    Properties:
      DomainName: !Ref ApiCustomDomain
      RestApiId: !Ref ApiGateway
      Stage: !Ref APIStage

  ## End API Specific

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId : !Ref Route53ZoneID
      Name: !Ref Route53DNSName
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt ApiCustomDomain.RegionalHostedZoneId